Function Set-Language {
	<#
    .SYNOPSIS
    Function "Set-Language" to set a language after a language pack is installed"
  
    .DESCRIPTION
    Author: Pwd9000 (Pwd9000@hotmail.co.uk)
    PSVersion: 5.1
  
    Call this function to configure a relevant language pack on the system.
    Specify a regions culture code using the dynamic paremeter <-CultureCode> to set the system to the specified regions culture, language, metric and keyboard layout.
    If no parameter is passed into the function, the default culture code "en-GB" will be set and configured.
    The function will also copy the language configuration to the Welcome Screen and New User Accounts (Reboot Required).
    Notes: - Becuase of the list size generated by the dynamic parameter <-CultureCode> specify at least one character for tab completion on the parameter.
           - Make sure that a relevant language pack for the OS is installed prior to using this function.
           - This function will create a folder on the "HOMEDRIVE" called "Temp" if it doesnt exist already to store an xml file generated by the function.
           - Please restart the machine for all configuration parameters to take full effect.
           - The settings configured within this function requires administrative access to the machine it is run on.
    
    DYNAMIC PARAMETERS
    -CultureCode <([System.Globalization.CultureInfo]::GetCultures('InstalledWin32Cultures')).Name>
        Dynamic parameter that retrieves and validates installed win32 cultures. E.g. "en-GB", "en-US", "en-AU", "pl-PL", "de-DE" <String>

    .EXAMPLE
    Set-Language
    The function on its own will set the system to use the language for Culture Code "en-GB".
    This will also be set to the welcome screen and new users (Requires Reboot).
  
    .EXAMPLE
    Set-Language -CultureCode "en-US"
    The function if used using the dynamic parameter -CultureCode will set the system to use the language for Culture Code selected.
    This will also be set to the welcome screen and new users (Requires Reboot).
    To see a list of available culture codes that can be applied specify the first character of the culture code and tab complete.

    .PARAMETER CultureCode
    Culture code. E.g. "en-GB", "en-US", "en-AU", "pl-PL", "de-DE" <String>
    This "dynamic" parameter is determined and validated by values retrieved from installed cultures: ([System.Globalization.CultureInfo]::GetCultures('InstalledWin32Cultures')).Name
#>
    
    [CmdletBinding()]
    param(
    )
    DynamicParam {
        #--------------------------------Set the dynamic parameter name------------------------------------
        $ParameterName = 'CultureCode'

        #-------------------------------------Create the dictionary----------------------------------------
        $RuntimeParamDic  = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary

        #------------------------------Create the collection of Attributes---------------------------------
        $AttribColl = New-Object  System.Collections.ObjectModel.Collection[System.Attribute]

        #----------------------------Create and set the parameter attributes-------------------------------
        $ParamAttrib  = New-Object System.Management.Automation.ParameterAttribute
        $ParamAttrib.Mandatory  = $false
        $ParamAttrib.Position = 1
        $ParamAttrib.ParameterSetName  = '__AllParameterSets'

        #------------------------Add the attributes to the attributes collection---------------------------
        $AttribColl.Add($ParamAttrib)

        #-----------------------------------Generate and set the ValidateSet ------------------------------
        $AvailableLanguageCultures  = ([System.Globalization.CultureInfo]::GetCultures('InstalledWin32Cultures')).Name
        $ValidateSetAttribute = New-Object System.Management.Automation.ValidateSetAttribute($AvailableLanguageCultures)

        #----------------------------Add the ValidateSet to the attributes collection----------------------
        $AttribColl.Add($ValidateSetAttribute)

        #-----------------------------------Create and return the dynamic parameter------------------------
        $RuntimeParam  = New-Object System.Management.Automation.RuntimeDefinedParameter($ParameterName,  [string], $AttribColl)
        #Specify a default value if no is passed in
        $PSBoundParameters["CultureCode"] = "en-GB"
        $RuntimeParamDic.Add($ParameterName,  $RuntimeParam)
        Return  $RuntimeParamDic   
    }

    Process {   
        #---------------------------------Import International Module--------------------------------------
        Import-Module International
    
        #---------------------------Determine relevant Language Variables----------------------------------
        $Culture = [System.Globalization.CultureInfo]::GetCultureInfo("$($PSBoundParameters.CultureCode)")
        $GeoID = ([System.Globalization.RegionInfo]$Culture.Name).GeoId
        Set-WinUserLanguageList $($PSBoundParameters.CultureCode) -Force
        $InputLanguageID = (Get-WinUserLanguageList).InputMethodTips
    
        #------------------------------------Set relevant language-----------------------------------------
        Set-WinSystemLocale -SystemLocale $PSBoundParameters.CultureCode
        Set-WinHomeLocation -GeoId $GeoID
        Set-Culture $PSBoundParameters.CultureCode

        #--------Construct XMLTemplate to commit language settings to welcome screen and new Users---------
        $XmlLangTempl = @"
<gs:GlobalizationServices xmlns:gs="urn:longhornGlobalizationUnattend">
    <!-- user list -->
        <gs:UserList>
            <gs:User UserID="Current" CopySettingsToDefaultUserAcct="true" CopySettingsToSystemAcct="true"/>
        </gs:UserList>
    <!-- GeoID -->
        <gs:LocationPreferences>
            <gs:GeoID Value="$($GeoID)"/>
        </gs:LocationPreferences>
    <!-- UI Language Prefernces -->
        <gs:MUILanguagePreferences>
            <gs:MUILanguage Value="$($PSBoundParameters.CultureCode)"/>
            <gs:MUIFallback Value="en-US"/>
        </gs:MUILanguagePreferences>
    <!-- system locale -->
        <gs:SystemLocale Name="$($PSBoundParameters.CultureCode)"/>
    <!-- input preferences -->
        <gs:InputPreferences>
            <gs:InputLanguageID Action="add" ID="$($InputLanguageID)" Default="true"/>
        </gs:InputPreferences>
    <!-- user locale -->
        <gs:UserLocale>
            <gs:Locale Name="$($PSBoundParameters.CultureCode)" SetAsCurrent="true" ResetAllSettings="true"/>
        </gs:UserLocale>
</gs:GlobalizationServices>
"@
        #----------Write out XML Template file to use in Control.exe to push language to new users----------
        #-------------DownloadDir: Test if a target download Dir exists, if not then create it-------------
        $HomeDrive = $env:HOMEDRIVE
        $TempDir = "$HomeDrive\Temp" 

        if (
            -not(Test-Path -Path $TempDir)
        ) {
            Write-Host "The temp directory does not exist" -ForegroundColor Red
            Write-Host "Creating [$TempDir]" -ForegroundColor Yellow
            New-Item -ItemType directory -Path $TempDir
        }
        $XmlLangTempl | out-file -filepath "$TempDir\XmlLangTempl.xml"

        #--------------------Commits the language configuration XML using control.exe----------------------
        $CommitProcess = "intl.cpl,, /f:""$TempDir\XmlLangTempl.xml"""
        Start-Process -FilePath control.exe -ArgumentList $CommitProcess
        Write-Host ""
        Write-Host "Please restart the machine for all language settings to take effect" -ForegroundColor Green
    }
}